[core]
  excludesfile = ~/.gitignore_global
  autocrlf = input
  editor = nvim 

[core]
    pager = delta
    {{ if .is_wsl }}
    sshCommand = ssh.exe
    {{ end }}

[interactive]
    diffFilter = delta --color-only --features=interactive

[delta]
    light = false
    features = decorations 
    line-numbers = true
    side-by-side = false

[delta "interactive"]
    keep-plus-minus-markers = false

[delta "decorations"]
    commit-decoration-style = blue ol
    commit-style = raw
    file-style = omit
    hunk-header-decoration-style = blue box
    hunk-header-file-style = red
    hunk-header-line-number-style = "#067a00"
    hunk-header-style = file line-number syntax

[diff]
  algorithm = histogram
  renames = true
  mnemoicPrefix = true
  colorMoved = plain
  
[merge]
  tool = nvim
  conflictStyle = zdiff3

[tag]
  sort = version:refname
  
# relies on having diffview.nvim in plugins
[mergetool "nvim"]
  cmd = nvim -c "DiffviewOpen"
  keepBackup = false
  
[mergetool]
  prompt = false

{{ if .personal -}}

[includeIf "hasconfig:remote.*.url:*gitlab.com:*/**"]
  path = "~/.config/.gitconfig-gitlab.id"
  
[includeIf "hasconfig:remote.*.url:*github.com:*/**"]
  path = "~/.config/.gitconfig-github.id"
  
{{ else }}

[user]
  name = Daniel Capecci
  email = {{ .email }}
{{ if .has_op -}}
  signingkey = {{ onepasswordRead "op://Personal/id_ed25519/public key" .vault_name  }}
[gpg]
  format = ssh
[gpg "ssh"]
  program = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign"
[commit]
  gpgsign = true
{{ end }}
  
{{- end }}
  
# [commit]
# template = ~/.stCommitMsg
  
[filter "lfs"]
  process = git-lfs filter-process
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  
[init]
  defaultBranch = main

# smarter merge resolution fixes
[rerere]
enabled = true
autoUpdate = true

[branch]
  sort = "-committerdate"
  
[column]
  ui = "auto"

[alias]  
  blamed = "blame -w -C -C -C"
  
  staash = "stash --all"

  # git sbadd [target_dir] [remote_name] [url] [branch] 
  sbadd = "!f() { git remote add -f $2 $3; git subtree add --prefix=$1 $3 $4 --squash; }; f"  
  
  # git sbpush [target_dir] [remote_name] [branch]
  sbpush = "!f() { git subtree push --prefix=$1 $2 $3; }; f"
  
  # git sbfetch [remote_name] [branch]  
  sbfetch = "!f() { git fetch $1 $2; }; f"  
  
  # git sbpull [target_dir] [remote_name] [branch]  
  sbpull = "!f() { git subtree pull --prefix=$1 $2 $3 --squash; }; f"  
  
  # git sbfpull [target_dir] [remote_name] [branch]  
  sbfetchpull = "!f() { git fetch $2 $3; git subtree pull --prefix=$1 $2 $3 --squash; }; f"
  
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin main"

  # Checkout a pull request from origin (of a github repository)
  pr = !"pr() { git fetch origin pull/$1/head:pr-$1; git checkout pr-$1; }; pr"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # update submodules if cloned without submodules
  sui = submodule update --init --recursive

  # update submodules already cloned
  su = submodule update --recursive --remote

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Color graph log view
  graph = log --graph --color --pretty=format:"%C(yellow)%H%C(green)%d%C(reset)%n%x20%cd%n%x20%cn%x20(%ce)%n%x20%s%n"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Preview delete branches that have already been merged with main
  # a.k.a. ‘delete merged’
  m = "!git branch --merged main | rg --invert-match '(main|master|develop|dev|HEAD)'"
  
  # Remove branches that have already been merged with main
  # a.k.a. ‘delete merged’
  md = "!git branch --merged main | rg --invert-match '(main|master|develop|dev|HEAD)' | xargs -n 1 git branch -d; git remote -v update -p"
  
  # Preview remove branches that have already been merged with main on remote
  # a.k.a. ‘delete merged remote’
  mr = "!git branch -r --merged origin/main | sed 's| *origin/||' | rg --invert-match '(main|master|develop|dev|HEAD)'"
  
  # Remove branches that have already been merged with main on remote
  # a.k.a. ‘delete merged remote’
  mrd = "!git branch -r --merged origin/main | sed 's| *origin/||' | rg --invert-match '(main|master|develop|dev|HEAD)' | xargs -n 1 -I{} git push origin --delete {}; git remote -v update -p"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  lg = log --color --decorate --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an (%G?)>%Creset' --abbrev-commit

  mdiff = "!f() { git stash | head -1 | grep -q 'No local changes to save'; x=$?; git merge --no-commit $1 &>/dev/null; git add -u &>/dev/null; git diff --staged; git reset --hard &>/dev/null; test $x -ne 0 && git stash pop &>/dev/null; }; f"

  # Codereview aliases
  # change = codereview change
  # gofmt = codereview gofmt
  # mail = codereview mail
  # pending = codereview pending
  # submit = codereview submit
  # sync = codereview sync

  # from seth vargo https://gist.github.com/sethvargo/6b2f7b592853381690bfe3bd00947e8f
  unreleased = "!f() { git fetch --tags && git diff $(git tag | tail -n 1); }; f"
  up = !git pull origin main && git remote prune origin && git submodule update --init --recursive
  undo = !git reset HEAD~1 --mixed
  top = !git log --format=format:%an | sort | uniq -c | sort -r | head -n 20

  # from trevor bramble https://twitter.com/TrevorBramble/status/774292970681937920
  alias=!git config -l | grep ^alias | cut -c 7- | sort

  # from myles borins https://github.com/TheAlphaNerd/Dot-files/blob/master/.gitconfig
  # github broke some workflow... this will make it less painful
  patchit = "!f() { echo $1.patch | sed s_pull/[0-9]*/commits_commit_ | xargs curl -L | git am --whitespace=fix; }; f"
  # patchit = "!f() { curl -L $1.patch | git am --whitespace=fix; }; f"
  patchit-please = "!f() { echo $1.patch | sed s_pull/[0-9]*/commits_commit_ | xargs curl -L | git am -3 --whitespace=fix; }; f"
  # patchit-please = "!f() { curl -L $1.patch | git am -3 --whitespace=fix; }; f"

[pull]
  rebase = true # rebase by default when pulling changes

[push]
  autoSetupRemote = true
  followTags = true # push tags by default
  default = simple

[fetch]
  prune = true # prune deleted branches on fetch
  # all = true
  
[help]
  autocorrect = true # auto-correct mistyped commands after 1 second

[commit]
  # verbose = true # show diff of changes in commit message editor

[rebase]
  autoStash = true # automatically stash changes before rebasing
  preserveMerges = true # preserve merge commits during rebase
  updateRefs = true # update refs during rebase



